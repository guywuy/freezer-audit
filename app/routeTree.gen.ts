/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LogoutRouteImport } from './routes/logout'
import { Route as LoginRouteImport } from './routes/login'
import { Route as LocationsRouteImport } from './routes/locations'
import { Route as JoinRouteImport } from './routes/join'
import { Route as ItemsRouteImport } from './routes/items'
import { Route as HealthcheckRouteImport } from './routes/healthcheck'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ItemsIndexRouteImport } from './routes/items.index'
import { Route as LoginActionRouteImport } from './routes/login.action'
import { Route as LocationsNewRouteImport } from './routes/locations.new'
import { Route as JoinActionRouteImport } from './routes/join.action'
import { Route as ItemsNewRouteImport } from './routes/items.new'
import { Route as ItemsItemIdRouteImport } from './routes/items.$itemId'
import { Route as LocationsNewActionRouteImport } from './routes/locations.new.action'
import { Route as ItemsNewActionRouteImport } from './routes/items.new.action'
import { Route as ItemsItemIdActionRouteImport } from './routes/items.$itemId.action'
import { Route as LocationsLocationIdDeleteActionRouteImport } from './routes/locations.$locationId.delete.action'
import { Route as ItemsItemIdNeedsmoreActionRouteImport } from './routes/items.$itemId.needsmore.action'
import { Route as ItemsItemIdDeleteActionRouteImport } from './routes/items.$itemId.delete.action'
import { Route as ItemsItemIdCloneActionRouteImport } from './routes/items.$itemId.clone.action'

const LogoutRoute = LogoutRouteImport.update({
  id: '/logout',
  path: '/logout',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const LocationsRoute = LocationsRouteImport.update({
  id: '/locations',
  path: '/locations',
  getParentRoute: () => rootRouteImport,
} as any)
const JoinRoute = JoinRouteImport.update({
  id: '/join',
  path: '/join',
  getParentRoute: () => rootRouteImport,
} as any)
const ItemsRoute = ItemsRouteImport.update({
  id: '/items',
  path: '/items',
  getParentRoute: () => rootRouteImport,
} as any)
const HealthcheckRoute = HealthcheckRouteImport.update({
  id: '/healthcheck',
  path: '/healthcheck',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ItemsIndexRoute = ItemsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ItemsRoute,
} as any)
const LoginActionRoute = LoginActionRouteImport.update({
  id: '/action',
  path: '/action',
  getParentRoute: () => LoginRoute,
} as any)
const LocationsNewRoute = LocationsNewRouteImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => LocationsRoute,
} as any)
const JoinActionRoute = JoinActionRouteImport.update({
  id: '/action',
  path: '/action',
  getParentRoute: () => JoinRoute,
} as any)
const ItemsNewRoute = ItemsNewRouteImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => ItemsRoute,
} as any)
const ItemsItemIdRoute = ItemsItemIdRouteImport.update({
  id: '/$itemId',
  path: '/$itemId',
  getParentRoute: () => ItemsRoute,
} as any)
const LocationsNewActionRoute = LocationsNewActionRouteImport.update({
  id: '/action',
  path: '/action',
  getParentRoute: () => LocationsNewRoute,
} as any)
const ItemsNewActionRoute = ItemsNewActionRouteImport.update({
  id: '/action',
  path: '/action',
  getParentRoute: () => ItemsNewRoute,
} as any)
const ItemsItemIdActionRoute = ItemsItemIdActionRouteImport.update({
  id: '/action',
  path: '/action',
  getParentRoute: () => ItemsItemIdRoute,
} as any)
const LocationsLocationIdDeleteActionRoute =
  LocationsLocationIdDeleteActionRouteImport.update({
    id: '/$locationId/delete/action',
    path: '/$locationId/delete/action',
    getParentRoute: () => LocationsRoute,
  } as any)
const ItemsItemIdNeedsmoreActionRoute =
  ItemsItemIdNeedsmoreActionRouteImport.update({
    id: '/needsmore/action',
    path: '/needsmore/action',
    getParentRoute: () => ItemsItemIdRoute,
  } as any)
const ItemsItemIdDeleteActionRoute = ItemsItemIdDeleteActionRouteImport.update({
  id: '/delete/action',
  path: '/delete/action',
  getParentRoute: () => ItemsItemIdRoute,
} as any)
const ItemsItemIdCloneActionRoute = ItemsItemIdCloneActionRouteImport.update({
  id: '/clone/action',
  path: '/clone/action',
  getParentRoute: () => ItemsItemIdRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/healthcheck': typeof HealthcheckRoute
  '/items': typeof ItemsRouteWithChildren
  '/join': typeof JoinRouteWithChildren
  '/locations': typeof LocationsRouteWithChildren
  '/login': typeof LoginRouteWithChildren
  '/logout': typeof LogoutRoute
  '/items/$itemId': typeof ItemsItemIdRouteWithChildren
  '/items/new': typeof ItemsNewRouteWithChildren
  '/join/action': typeof JoinActionRoute
  '/locations/new': typeof LocationsNewRouteWithChildren
  '/login/action': typeof LoginActionRoute
  '/items/': typeof ItemsIndexRoute
  '/items/$itemId/action': typeof ItemsItemIdActionRoute
  '/items/new/action': typeof ItemsNewActionRoute
  '/locations/new/action': typeof LocationsNewActionRoute
  '/items/$itemId/clone/action': typeof ItemsItemIdCloneActionRoute
  '/items/$itemId/delete/action': typeof ItemsItemIdDeleteActionRoute
  '/items/$itemId/needsmore/action': typeof ItemsItemIdNeedsmoreActionRoute
  '/locations/$locationId/delete/action': typeof LocationsLocationIdDeleteActionRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/healthcheck': typeof HealthcheckRoute
  '/join': typeof JoinRouteWithChildren
  '/locations': typeof LocationsRouteWithChildren
  '/login': typeof LoginRouteWithChildren
  '/logout': typeof LogoutRoute
  '/items/$itemId': typeof ItemsItemIdRouteWithChildren
  '/items/new': typeof ItemsNewRouteWithChildren
  '/join/action': typeof JoinActionRoute
  '/locations/new': typeof LocationsNewRouteWithChildren
  '/login/action': typeof LoginActionRoute
  '/items': typeof ItemsIndexRoute
  '/items/$itemId/action': typeof ItemsItemIdActionRoute
  '/items/new/action': typeof ItemsNewActionRoute
  '/locations/new/action': typeof LocationsNewActionRoute
  '/items/$itemId/clone/action': typeof ItemsItemIdCloneActionRoute
  '/items/$itemId/delete/action': typeof ItemsItemIdDeleteActionRoute
  '/items/$itemId/needsmore/action': typeof ItemsItemIdNeedsmoreActionRoute
  '/locations/$locationId/delete/action': typeof LocationsLocationIdDeleteActionRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/healthcheck': typeof HealthcheckRoute
  '/items': typeof ItemsRouteWithChildren
  '/join': typeof JoinRouteWithChildren
  '/locations': typeof LocationsRouteWithChildren
  '/login': typeof LoginRouteWithChildren
  '/logout': typeof LogoutRoute
  '/items/$itemId': typeof ItemsItemIdRouteWithChildren
  '/items/new': typeof ItemsNewRouteWithChildren
  '/join/action': typeof JoinActionRoute
  '/locations/new': typeof LocationsNewRouteWithChildren
  '/login/action': typeof LoginActionRoute
  '/items/': typeof ItemsIndexRoute
  '/items/$itemId/action': typeof ItemsItemIdActionRoute
  '/items/new/action': typeof ItemsNewActionRoute
  '/locations/new/action': typeof LocationsNewActionRoute
  '/items/$itemId/clone/action': typeof ItemsItemIdCloneActionRoute
  '/items/$itemId/delete/action': typeof ItemsItemIdDeleteActionRoute
  '/items/$itemId/needsmore/action': typeof ItemsItemIdNeedsmoreActionRoute
  '/locations/$locationId/delete/action': typeof LocationsLocationIdDeleteActionRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/healthcheck'
    | '/items'
    | '/join'
    | '/locations'
    | '/login'
    | '/logout'
    | '/items/$itemId'
    | '/items/new'
    | '/join/action'
    | '/locations/new'
    | '/login/action'
    | '/items/'
    | '/items/$itemId/action'
    | '/items/new/action'
    | '/locations/new/action'
    | '/items/$itemId/clone/action'
    | '/items/$itemId/delete/action'
    | '/items/$itemId/needsmore/action'
    | '/locations/$locationId/delete/action'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/healthcheck'
    | '/join'
    | '/locations'
    | '/login'
    | '/logout'
    | '/items/$itemId'
    | '/items/new'
    | '/join/action'
    | '/locations/new'
    | '/login/action'
    | '/items'
    | '/items/$itemId/action'
    | '/items/new/action'
    | '/locations/new/action'
    | '/items/$itemId/clone/action'
    | '/items/$itemId/delete/action'
    | '/items/$itemId/needsmore/action'
    | '/locations/$locationId/delete/action'
  id:
    | '__root__'
    | '/'
    | '/healthcheck'
    | '/items'
    | '/join'
    | '/locations'
    | '/login'
    | '/logout'
    | '/items/$itemId'
    | '/items/new'
    | '/join/action'
    | '/locations/new'
    | '/login/action'
    | '/items/'
    | '/items/$itemId/action'
    | '/items/new/action'
    | '/locations/new/action'
    | '/items/$itemId/clone/action'
    | '/items/$itemId/delete/action'
    | '/items/$itemId/needsmore/action'
    | '/locations/$locationId/delete/action'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  HealthcheckRoute: typeof HealthcheckRoute
  ItemsRoute: typeof ItemsRouteWithChildren
  JoinRoute: typeof JoinRouteWithChildren
  LocationsRoute: typeof LocationsRouteWithChildren
  LoginRoute: typeof LoginRouteWithChildren
  LogoutRoute: typeof LogoutRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/logout': {
      id: '/logout'
      path: '/logout'
      fullPath: '/logout'
      preLoaderRoute: typeof LogoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/locations': {
      id: '/locations'
      path: '/locations'
      fullPath: '/locations'
      preLoaderRoute: typeof LocationsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/join': {
      id: '/join'
      path: '/join'
      fullPath: '/join'
      preLoaderRoute: typeof JoinRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/items': {
      id: '/items'
      path: '/items'
      fullPath: '/items'
      preLoaderRoute: typeof ItemsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/healthcheck': {
      id: '/healthcheck'
      path: '/healthcheck'
      fullPath: '/healthcheck'
      preLoaderRoute: typeof HealthcheckRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/items/': {
      id: '/items/'
      path: '/'
      fullPath: '/items/'
      preLoaderRoute: typeof ItemsIndexRouteImport
      parentRoute: typeof ItemsRoute
    }
    '/login/action': {
      id: '/login/action'
      path: '/action'
      fullPath: '/login/action'
      preLoaderRoute: typeof LoginActionRouteImport
      parentRoute: typeof LoginRoute
    }
    '/locations/new': {
      id: '/locations/new'
      path: '/new'
      fullPath: '/locations/new'
      preLoaderRoute: typeof LocationsNewRouteImport
      parentRoute: typeof LocationsRoute
    }
    '/join/action': {
      id: '/join/action'
      path: '/action'
      fullPath: '/join/action'
      preLoaderRoute: typeof JoinActionRouteImport
      parentRoute: typeof JoinRoute
    }
    '/items/new': {
      id: '/items/new'
      path: '/new'
      fullPath: '/items/new'
      preLoaderRoute: typeof ItemsNewRouteImport
      parentRoute: typeof ItemsRoute
    }
    '/items/$itemId': {
      id: '/items/$itemId'
      path: '/$itemId'
      fullPath: '/items/$itemId'
      preLoaderRoute: typeof ItemsItemIdRouteImport
      parentRoute: typeof ItemsRoute
    }
    '/locations/new/action': {
      id: '/locations/new/action'
      path: '/action'
      fullPath: '/locations/new/action'
      preLoaderRoute: typeof LocationsNewActionRouteImport
      parentRoute: typeof LocationsNewRoute
    }
    '/items/new/action': {
      id: '/items/new/action'
      path: '/action'
      fullPath: '/items/new/action'
      preLoaderRoute: typeof ItemsNewActionRouteImport
      parentRoute: typeof ItemsNewRoute
    }
    '/items/$itemId/action': {
      id: '/items/$itemId/action'
      path: '/action'
      fullPath: '/items/$itemId/action'
      preLoaderRoute: typeof ItemsItemIdActionRouteImport
      parentRoute: typeof ItemsItemIdRoute
    }
    '/locations/$locationId/delete/action': {
      id: '/locations/$locationId/delete/action'
      path: '/$locationId/delete/action'
      fullPath: '/locations/$locationId/delete/action'
      preLoaderRoute: typeof LocationsLocationIdDeleteActionRouteImport
      parentRoute: typeof LocationsRoute
    }
    '/items/$itemId/needsmore/action': {
      id: '/items/$itemId/needsmore/action'
      path: '/needsmore/action'
      fullPath: '/items/$itemId/needsmore/action'
      preLoaderRoute: typeof ItemsItemIdNeedsmoreActionRouteImport
      parentRoute: typeof ItemsItemIdRoute
    }
    '/items/$itemId/delete/action': {
      id: '/items/$itemId/delete/action'
      path: '/delete/action'
      fullPath: '/items/$itemId/delete/action'
      preLoaderRoute: typeof ItemsItemIdDeleteActionRouteImport
      parentRoute: typeof ItemsItemIdRoute
    }
    '/items/$itemId/clone/action': {
      id: '/items/$itemId/clone/action'
      path: '/clone/action'
      fullPath: '/items/$itemId/clone/action'
      preLoaderRoute: typeof ItemsItemIdCloneActionRouteImport
      parentRoute: typeof ItemsItemIdRoute
    }
  }
}

interface ItemsItemIdRouteChildren {
  ItemsItemIdActionRoute: typeof ItemsItemIdActionRoute
  ItemsItemIdCloneActionRoute: typeof ItemsItemIdCloneActionRoute
  ItemsItemIdDeleteActionRoute: typeof ItemsItemIdDeleteActionRoute
  ItemsItemIdNeedsmoreActionRoute: typeof ItemsItemIdNeedsmoreActionRoute
}

const ItemsItemIdRouteChildren: ItemsItemIdRouteChildren = {
  ItemsItemIdActionRoute: ItemsItemIdActionRoute,
  ItemsItemIdCloneActionRoute: ItemsItemIdCloneActionRoute,
  ItemsItemIdDeleteActionRoute: ItemsItemIdDeleteActionRoute,
  ItemsItemIdNeedsmoreActionRoute: ItemsItemIdNeedsmoreActionRoute,
}

const ItemsItemIdRouteWithChildren = ItemsItemIdRoute._addFileChildren(
  ItemsItemIdRouteChildren,
)

interface ItemsNewRouteChildren {
  ItemsNewActionRoute: typeof ItemsNewActionRoute
}

const ItemsNewRouteChildren: ItemsNewRouteChildren = {
  ItemsNewActionRoute: ItemsNewActionRoute,
}

const ItemsNewRouteWithChildren = ItemsNewRoute._addFileChildren(
  ItemsNewRouteChildren,
)

interface ItemsRouteChildren {
  ItemsItemIdRoute: typeof ItemsItemIdRouteWithChildren
  ItemsNewRoute: typeof ItemsNewRouteWithChildren
  ItemsIndexRoute: typeof ItemsIndexRoute
}

const ItemsRouteChildren: ItemsRouteChildren = {
  ItemsItemIdRoute: ItemsItemIdRouteWithChildren,
  ItemsNewRoute: ItemsNewRouteWithChildren,
  ItemsIndexRoute: ItemsIndexRoute,
}

const ItemsRouteWithChildren = ItemsRoute._addFileChildren(ItemsRouteChildren)

interface JoinRouteChildren {
  JoinActionRoute: typeof JoinActionRoute
}

const JoinRouteChildren: JoinRouteChildren = {
  JoinActionRoute: JoinActionRoute,
}

const JoinRouteWithChildren = JoinRoute._addFileChildren(JoinRouteChildren)

interface LocationsNewRouteChildren {
  LocationsNewActionRoute: typeof LocationsNewActionRoute
}

const LocationsNewRouteChildren: LocationsNewRouteChildren = {
  LocationsNewActionRoute: LocationsNewActionRoute,
}

const LocationsNewRouteWithChildren = LocationsNewRoute._addFileChildren(
  LocationsNewRouteChildren,
)

interface LocationsRouteChildren {
  LocationsNewRoute: typeof LocationsNewRouteWithChildren
  LocationsLocationIdDeleteActionRoute: typeof LocationsLocationIdDeleteActionRoute
}

const LocationsRouteChildren: LocationsRouteChildren = {
  LocationsNewRoute: LocationsNewRouteWithChildren,
  LocationsLocationIdDeleteActionRoute: LocationsLocationIdDeleteActionRoute,
}

const LocationsRouteWithChildren = LocationsRoute._addFileChildren(
  LocationsRouteChildren,
)

interface LoginRouteChildren {
  LoginActionRoute: typeof LoginActionRoute
}

const LoginRouteChildren: LoginRouteChildren = {
  LoginActionRoute: LoginActionRoute,
}

const LoginRouteWithChildren = LoginRoute._addFileChildren(LoginRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  HealthcheckRoute: HealthcheckRoute,
  ItemsRoute: ItemsRouteWithChildren,
  JoinRoute: JoinRouteWithChildren,
  LocationsRoute: LocationsRouteWithChildren,
  LoginRoute: LoginRouteWithChildren,
  LogoutRoute: LogoutRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
